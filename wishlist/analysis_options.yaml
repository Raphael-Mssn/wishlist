# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: all_lint_rules.yaml

analyzer:
  exclude:
    - lib/**/*.freezed.dart
    - lib/**/*.g.dart
    - lib/**/*.graphql.dart
    - lib/**/*.gassets.dart
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  errors:
    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.
    # We explicitly enabled even conflicting rules and are fixing the conflict
    # in this file
    included_file_warning: ignore
    # false positive when using Freezed
    invalid_annotation_target: ignore

linter:
  rules:
    # False positive for custom enum-like classes (such as Flutter's "Colors")
    avoid_classes_with_only_static_members: false

    # False positive when the future is returned by the function
    # And this provoks a bug when putting "async" keyword in a mocktail when mock
    discarded_futures: false

    # Not needed right now, maybe re-activate it later
    flutter_style_todos: false

    # It can be useful but cause a lot of problems with class like WidgetsBindingObserver where some methods
    #  are already implemented
    prefer_mixin: false

    # false positive
    one_member_abstracts: false

    # Too verbose with little value, and this is taken care of by the Flutter devtool anyway.
    diagnostic_describe_all_properties: false

    # Conflicts with `avoid_final_parameters`
    prefer_final_parameters: false

    # Conflicts with `prefer_single_quotes`
    # Single quotes are easier to type and don't compromise on readability.
    prefer_double_quotes: false

    # Conflicts with `omit_local_variable_types` and other rules.
    # As per Dart guidelines, we want to avoid unnecessary types to make the code
    # more readable.
    # See https://dart.dev/guides/language/effective-dart/design#avoid-type-annotating-initialized-local-variables
    always_specify_types: false

    # There are situations where we voluntarily want to catch everything,
    # especially as a library.
    avoid_catches_without_on_clauses: false

    # Conflicts with disabling `implicit-dynamic`
    avoid_annotating_with_dynamic: false

    # "By convention, widget constructors only use named arguments.
    # Also by convention, the first argument is key, and the last argument is child, children, or the equivalent.""
    # This rule force key to be placed last, so we don't use it
    always_put_required_named_parameters_first: false

    # Incompatible with `prefer_final_locals`
    # Having immutable local variables makes larger functions more predictable
    # so we will use `prefer_final_locals` instead.
    unnecessary_final: false

    # Not mandatory since this is not a sdk
    public_member_api_docs: false

    # Not quite suitable for Flutter, which may have a `build` method with a single
    # return, but that return is still complex enough that a "body" is worth it.
    prefer_expression_function_bodies: false

    # Make some code less readable
    cascade_invocations: false

    # False positive when updating state before returning it in
    # StateNotifier
    join_return_with_assignment: false

    # We need this rule to handle flavors and dev environments
    do_not_use_environment: false

    # We find it easier to refactor with relative imports
    # and conflict with `always_use_package_imports`
    prefer_relative_imports: false

import 'package:fast_immutable_collections/fast_immutable_collections.dart';

/// Donn√©es de tous les types de friendships pour l'utilisateur courant
class FriendshipIds {
  const FriendshipIds({
    required this.friendsIds,
    required this.pendingIds,
    required this.requestedIds,
  });

  final ISet<String> friendsIds;
  final ISet<String> pendingIds;
  final ISet<String> requestedIds;
}

/// Interface pour √©couter les changements en temps r√©el sur les friendships
abstract class FriendshipStreamRepository {
  /// üéØ √âcoute TOUS les changements de friendships de l'utilisateur courant
  ///
  /// Retourne un stream qui √©met FriendshipIds √† chaque changement
  /// C'est la m√©thode recommand√©e pour √©viter les race conditions
  Stream<FriendshipIds> watchCurrentUserAllFriendships();

  /// √âcoute tous les changements sur les IDs des amis d'un utilisateur
  ///
  /// √âmet un nouveau set √† chaque changement (ajout/suppression d'ami)
  Stream<ISet<String>> watchFriendsIds(String userId);

  /// √âcoute les changements sur les IDs des amis de l'utilisateur courant
  Stream<ISet<String>> watchCurrentUserFriendsIds();

  /// √âcoute les changements sur les demandes d'amiti√© en attente (re√ßues)
  Stream<ISet<String>> watchCurrentUserPendingFriendsIds();

  /// √âcoute les changements sur les demandes d'amiti√© envoy√©es
  Stream<ISet<String>> watchCurrentUserRequestedFriendsIds();

  /// Ferme tous les streams et lib√®re les ressources
  Future<void> dispose();
}
